/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-10-25 02:08:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class chat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

   String path = request.getContextPath();
   String socketPath = request.getServerName()+":"+request.getServerPort()+path+"/";
   String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()
	+ path + "/";

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>websocket聊天房间实现</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div id=\"welcome\">welcome</div><br/>         \r\n");
      out.write("           <input type=\"hidden\" id=\"socketPath\" value=\"");
      out.print(socketPath);
      out.write("\">\r\n");
      out.write("           <input name=\"ishost\" type=\"hidden\" id=\"ishost\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ishost }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\"/>\r\n");
      out.write("           <input name=\"userId\" type=\"text\" id=\"userId\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${userId }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\"/>\r\n");
      out.write("           <input name=\"roomName\" type=\"hidden\" id=\"roomName\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${roomName }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("\"/>\r\n");
      out.write("           <label id=\"host\"></label>\r\n");
      out.write("           <div id=\"Shuffle_deck\"></div>\r\n");
      out.write("           <label id=\"roomsize\"></label>\r\n");
      out.write("           请输入你要发送的用户id<input id=\"toId\" name=\"toId\" type=\"text\"><br/>\r\n");
      out.write("    <input id=\"messageText\" name=\"message\" type=\"text\"/>\r\n");
      out.write("    <button onclick=\"sendtoController()\">发送消息</button>\r\n");
      out.write("    <hr/>\r\n");
      out.write("    <button onclick=\"closeWebSocket()\">关闭WebSocket连接</button>\r\n");
      out.write("    <hr/>\r\n");
      out.write("    <div id=\"message\"></div>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(basePath);
      out.write("js/jquery-1.8.3.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    //document.getElementById('fromId').value=document.getElementById('userId').value;\r\n");
      out.write("    var websocket = null;\r\n");
      out.write("    var userId=$('#userId').val();//获取从登录页面添加到session中的userId\r\n");
      out.write("    welcomeInnerHTML(userId);//添加欢迎用户显示出来\r\n");
      out.write("    var roomName=$('#roomName').val();//获取从登录页面添加到session中的房间号\r\n");
      out.write("    var ishost=$('#ishost').val();//从创建房间页面中获取是否为房主的标记\r\n");
      out.write("    console.log(roomName+ishost);\r\n");
      out.write("    if(ishost==\"1\"){\r\n");
      out.write("    \tconsole.log(\"房主\");\r\n");
      out.write("    \tdocument.getElementById('host').innerHTML += '房主'+ '<br/>';\r\n");
      out.write("    \t//Shuffle_deck\r\n");
      out.write("    \tdocument.getElementById('host').innerHTML += '<button onclick=\"Shuffle_deck()\">房主请洗牌</button>'+ '<br/>';\r\n");
      out.write("    }\r\n");
      out.write("    var roomsize='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sessionScope.roomsize}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null, false));
      out.write("';\r\n");
      out.write("    //document.getElementById('ishost').innerHTML = roomsize+1+ '<br/>';\r\n");
      out.write("    console.log(roomName);\r\n");
      out.write("    var socketPath=document.getElementById('socketPath').value;\r\n");
      out.write("    //判断当前浏览器是否支持WebSocket\r\n");
      out.write("    if ('WebSocket' in window) {\r\n");
      out.write("        //websocket = new WebSocket(\"ws://\"+socketPath+\"/ws\");\r\n");
      out.write("        websocket = new WebSocket(\"ws://\"+socketPath+\"ws.action\");\r\n");
      out.write("        console.log(\"=========WebSocket\");\r\n");
      out.write("    }else if('MozWebSocket' in window ){\r\n");
      out.write("        //alert('当前浏览器 Not support websocket')\r\n");
      out.write("    \twebsocket = new MozWebSocket(\"ws://\"+socketPath+\"/ws.action\");\r\n");
      out.write("    \tconsole.log(\"=========MozWebSocket\");\r\n");
      out.write("    }else {\r\n");
      out.write("    \twebsocket = new SocJs(\"http://\"+socketPath+\"/ws/sockjs.action\");\r\n");
      out.write("    \tconsole.log(\"========SockJs\");\r\n");
      out.write("    }\r\n");
      out.write("    console.log(\"ws://\"+socketPath+\"/ws.action?userId=\"+userId+\"roomName=\"+roomName);\r\n");
      out.write("    //连接发生错误的回调方法\r\n");
      out.write("    websocket.onerror = function () {\r\n");
      out.write("        setMessageInnerHTML(\"WebSocket连接发生错误\");\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    //连接成功建立的回调方法\r\n");
      out.write("    websocket.onopen = function (event) {\r\n");
      out.write("        setMessageInnerHTML(\"WebSocket连接成功\");\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //接收到消息的回调方法\r\n");
      out.write("    websocket.onmessage = function (event) {\r\n");
      out.write("    \tconsole.log('client recieved  a message',event);\r\n");
      out.write("    \tif(isJsonString(event.data)){\r\n");
      out.write("    \t\tconsole.log(\"this is a json\");\r\n");
      out.write("    \t\tvar data = JSON.parse(event.data);//将数据解析成JSON形式,把json转换为js对象格式\r\n");
      out.write("        \t//var data=$.parseJSON(event.data);\r\n");
      out.write("    \t\t//var data=JSON.stringify(event.data);\r\n");
      out.write("    \t\tconsole.log(data);\r\n");
      out.write("    \t\tif(isJsonString(event.data)){\r\n");
      out.write("    \t\t\tconsole.log(\"是json格式\");\r\n");
      out.write("    \t\t}\r\n");
      out.write("        \tconsole.log(\"websocket,收到一条消息：\",data[0][\"rank\"]);\r\n");
      out.write("        \tsendMessageInnerHTML(data);\r\n");
      out.write("    \t}\r\n");
      out.write("    \telse{\r\n");
      out.write("    \t\tconsole.log(\"this is not a json\");\r\n");
      out.write("    \t\tconsole.log(\"websocket,收到一条消息：\",event.data);\r\n");
      out.write("        \tsendMessageInnerHTML(event.data);\r\n");
      out.write("    \t}\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //连接关闭的回调方法\r\n");
      out.write("    websocket.onclose = function () {\r\n");
      out.write("        setMessageInnerHTML(\"WebSocket连接关闭\");\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。\r\n");
      out.write("    window.onbeforeunload = function () {\r\n");
      out.write("        closeWebSocket();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //将消息显示在网页上\r\n");
      out.write("    function setMessageInnerHTML(innerHTML) {\r\n");
      out.write("        document.getElementById('message').innerHTML += innerHTML+ '<br/>';\r\n");
      out.write("    }\r\n");
      out.write("    function welcomeInnerHTML(innerHTML){\r\n");
      out.write("    \t document.getElementById('welcome').innerHTML += ','+innerHTML+ '<br/>';\r\n");
      out.write("    }\r\n");
      out.write("    function sendMessageInnerHTML(innerHTML){\r\n");
      out.write("    \t//getJsonValue(innerHTML,\"messageText\") \r\n");
      out.write("    \tif(isObject(innerHTML)){\r\n");
      out.write("    \t\t//document.getElementById('message').innerHTML +=innerHTML[\"fromId\"]+'发来一条消息:'+ innerHTML[\"messageText\"] + '<br/>'+innerHTML[\"messageDate\"]+'<br/>';\r\n");
      out.write("        \tdocument.getElementById('message').innerHTML +=innerHTML[0][\"rank\"][\"score\"]+switchshortname(innerHTML[0][\"suit\"][\"shortName\"]);\r\n");
      out.write("    \t\tconsole.log(innerHTML[0][\"rank\"]+switchshortname(innerHTML[0][\"suit\"][\"shortName\"]));\r\n");
      out.write("    \t}\r\n");
      out.write("    \tif(isString(innerHTML)){\r\n");
      out.write("    \t\t//如果是字符串，则输出字符串\r\n");
      out.write("    \t\tdocument.getElementById('message').innerHTML +=innerHTML+'<br/>';\r\n");
      out.write("    \t\tconsole.log(innerHTML);\r\n");
      out.write("    \t}\r\n");
      out.write("    }\r\n");
      out.write("    //关闭WebSocket连接\r\n");
      out.write("    function closeWebSocket() {\r\n");
      out.write("        websocket.close();\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //发送消息\r\n");
      out.write("    function send() {\r\n");
      out.write("    \t\r\n");
      out.write("    \t\r\n");
      out.write("    \t//对象为空\r\n");
      out.write("    \tif(websocket==undefined||websocket==null){\r\n");
      out.write("    \t\talert(\"你的连接已丢失，请退出聊天重新进入\");\r\n");
      out.write("    \t\treturn;\r\n");
      out.write("    \t}\r\n");
      out.write("        var message = document.getElementById('messageText').value;\r\n");
      out.write("        if(message==null){\r\n");
      out.write("        \treturn;\r\n");
      out.write("        }else{\r\n");
      out.write("        \t //发送\r\n");
      out.write("            var data = {};//新建data对象，并规定属性名与相应的值\r\n");
      out.write("                    //data['userId']=document.getElementById('userId').value;\r\n");
      out.write("                    data['fromId'] = userId;\r\n");
      out.write("                    data['roomName'] = roomName;\r\n");
      out.write("                    //data['fromName'] = sendName;\r\n");
      out.write("                    data['toId'] = document.getElementById('toId').value;\r\n");
      out.write("                    data['messageText']=document.getElementById('messageText').value;\r\n");
      out.write("                    //data['messageText'] = $(\".contactDivTrue_right_input\").val();\r\n");
      out.write("                    websocket.send(JSON.stringify(data));//将对象封装成JSON后发送至服务器\r\n");
      out.write("        }\r\n");
      out.write("        //websocket.send(message);\r\n");
      out.write("    }\r\n");
      out.write("    function isJsonString(str) {\r\n");
      out.write("    \t//判断是否为json格式\r\n");
      out.write("            try {\r\n");
      out.write("            \t\r\n");
      out.write("                if (typeof JSON.parse(str) == \"object\") {\r\n");
      out.write("                    return true;\r\n");
      out.write("                }\r\n");
      out.write("            } catch(e) {\r\n");
      out.write("            }\r\n");
      out.write("            return false;\r\n");
      out.write("           \r\n");
      out.write("        }\r\n");
      out.write("    function isString(str){\r\n");
      out.write("    \t//判断是否为String格式\r\n");
      out.write("        try {\r\n");
      out.write("        \t\r\n");
      out.write("            if (typeof str == \"string\") {\r\n");
      out.write("                return true;\r\n");
      out.write("            }\r\n");
      out.write("        } catch(e) {\r\n");
      out.write("        }\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("    function isObject(str){\r\n");
      out.write("    \t//判断是否为String格式\r\n");
      out.write("        try {\r\n");
      out.write("        \t\r\n");
      out.write("            if (typeof str == \"object\") {\r\n");
      out.write("                return true;\r\n");
      out.write("            }\r\n");
      out.write("        } catch(e) {\r\n");
      out.write("        }\r\n");
      out.write("        return false;\r\n");
      out.write("    }\r\n");
      out.write("    function Shuffle_deck(){\r\n");
      out.write("    \tif(parseInt(roomsize)<3){\r\n");
      out.write("    \t\talert(\"房间人数未满，请等待房间人满之后洗牌,房间人数为:\"+roomsize.toString());\r\n");
      out.write("    \t\tconsole.log(roomsize.toString());\r\n");
      out.write("    \t}else{\r\n");
      out.write("    \t\t$.post(\"");
      out.print(basePath);
      out.write("/ShuffleDeck.action\",function(data){\r\n");
      out.write("   \t\t\t //alert(data);\r\n");
      out.write("   \t\t\t if(data==\"1\"){\r\n");
      out.write("   \t\t\t\t alert(\"洗牌成功\");\r\n");
      out.write("   \t\t\t }else{\r\n");
      out.write("   \t\t\t\t alert(\"洗牌失败\");\r\n");
      out.write("   \t\t\t }\r\n");
      out.write("   \t\t\t}); \r\n");
      out.write("    \t}\r\n");
      out.write("    }\r\n");
      out.write("    function sendtoController(){\r\n");
      out.write("    \tvar message=$('#messageText').val();\r\n");
      out.write("    \tvar toId=$('#toId').val();\r\n");
      out.write("    \tvar data={\r\n");
      out.write("    \t\t\tmsg:message,\r\n");
      out.write("    \t\t\troomname:roomName,\r\n");
      out.write("    \t\t\ttoid:toId\r\n");
      out.write("    \t};\r\n");
      out.write("    \t//data['roomName']=roomName;\r\n");
      out.write("    \t$.post(\"");
      out.print(basePath);
      out.write("sendmessage.action\",data,function(data){\r\n");
      out.write("  \t\t\t //alert(data);\r\n");
      out.write("  \t\t\t if(data==\"1\"){\r\n");
      out.write("  \t\t\t\t alert(\"发送成功\");\r\n");
      out.write("  \t\t\t }\r\n");
      out.write("  \t\t\t}); \r\n");
      out.write("    }\r\n");
      out.write("    function switchshortname(shortName){//将花色的缩写转变为对应图形\r\n");
      out.write("    \tswitch (shortName)\r\n");
      out.write("        {\r\n");
      out.write("            case 'S': return \"♠\";\r\n");
      out.write("            case 'H': return \"♥\";\r\n");
      out.write("            case 'C': return \"♣\";\r\n");
      out.write("            case 'D': return \"♦\";\r\n");
      out.write("            //default: return Character.toString(shortName);\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
